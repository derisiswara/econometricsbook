{
  "hash": "58fc54cb846be47bac54b9ce1a31ab1c",
  "result": {
    "engine": "knitr",
    "markdown": "# Multivariate GARCH\n\n## DCC-GARCH\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quantmod)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: xts\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: zoo\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'zoo'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: TTR\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n\n\n:::\n\n```{.r .cell-code}\n# Needed Internet Connection !! alike install packages\n# Stock Ticker\nstocks <- c(\"ASII.JK\",\"BBCA.JK\")\n\ndata_list <- lapply(stocks, function(stock) {\n    getSymbols(stock, src = \"yahoo\", from = \"2018-01-01\", to=\"2022-12-31\", auto.assign = FALSE)\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: ASII.JK contains missing values. Some functions will not work if\nobjects contain missing values in the middle of the series. Consider using\nna.omit(), na.approx(), na.fill(), etc to remove or replace them.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Daily Return\nreturns <- lapply(data_list, function(data) {\n    dailyReturn(Cl(data))\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in to_period(xx, period = on.opts[[period]], ...): missing values\nremoved from data\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combine data\ncombined_returns <- do.call(merge, returns)\nnames(combined_returns) <- stocks\ncombined_returns <- na.omit(combined_returns)\nhead(combined_returns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                ASII.JK     BBCA.JK\n2018-01-01  0.000000000 0.000000000\n2018-01-02 -0.012048193 0.000000000\n2018-01-03 -0.018292683 0.000000000\n2018-01-04  0.021739130 0.014840183\n2018-01-05  0.009118541 0.001124859\n2018-01-08  0.000000000 0.004494382\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rugarch)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: parallel\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rugarch'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    sigma\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rmgarch)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rmgarch'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:xts':\n\n    first, last\n```\n\n\n:::\n\n```{.r .cell-code}\n# GARCH Specification for a Single Asset\nunispec <- ugarchspec(mean.model = list(armaOrder = c(0, 0)),\n                     variance.model = list(model = \"gjrGARCH\",\n                                           garchOrder = c(1, 1)),\n                     distribution.model = \"norm\")\n\n# Determine the number of assets\nn_assets <- ncol(combined_returns)\n\n# Replicate GARCH Specification for All Assets\ngarch_spec <- multispec(replicate(n_assets, unispec)) \n\n# DCC Model Specification\ndcc_spec <- dccspec(uspec = garch_spec, \n                   dccOrder = c(1, 1), \n                   distribution = \"mvnorm\")\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Fit DCC\ndcc.fit <- dccfit(dcc_spec, \n                 data = combined_returns, \n                 fit.control=list(scale=TRUE))\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndcc.fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n*---------------------------------*\n*          DCC GARCH Fit          *\n*---------------------------------*\n\nDistribution         :  mvnorm\nModel                :  DCC(1,1)\nNo. Parameters       :  13\n[VAR GARCH DCC UncQ] : [0+10+2+1]\nNo. Series           :  2\nNo. Obs.             :  1253\nLog-Likelihood       :  6804.626\nAv.Log-Likelihood    :  5.43 \n\nOptimal Parameters\n-----------------------------------\n                  Estimate  Std. Error   t value Pr(>|t|)\n[ASII.JK].mu     -0.000439    0.000538  -0.81597 0.414515\n[ASII.JK].omega   0.000013    0.000001  12.73770 0.000000\n[ASII.JK].alpha1  0.029271    0.009480   3.08756 0.002018\n[ASII.JK].beta1   0.912943    0.007720 118.25080 0.000000\n[ASII.JK].gamma1  0.056569    0.023773   2.37952 0.017335\n[BBCA.JK].mu      0.000635    0.000531   1.19598 0.231706\n[BBCA.JK].omega   0.000015    0.000008   1.90315 0.057021\n[BBCA.JK].alpha1  0.053503    0.030192   1.77212 0.076374\n[BBCA.JK].beta1   0.820666    0.052704  15.57124 0.000000\n[BBCA.JK].gamma1  0.127614    0.044277   2.88221 0.003949\n[Joint]dcca1      0.050241    0.033824   1.48539 0.137441\n[Joint]dccb1      0.766227    0.197276   3.88403 0.000103\n\nInformation Criteria\n---------------------\n                    \nAkaike       -10.841\nBayes        -10.787\nShibata      -10.841\nHannan-Quinn -10.821\n\n\nElapsed time : 2.327933 \n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conditional Covariances\ncov <- rcov(dcc.fit)\ndim(cov)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    2    2 1253\n```\n\n\n:::\n\n```{.r .cell-code}\ncov[,,1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 2018-01-01\n\n             ASII.JK      BBCA.JK\nASII.JK 0.0004465808 0.0001387231\nBBCA.JK 0.0001387231 0.0002527424\n\n, , 2018-01-02\n\n             ASII.JK      BBCA.JK\nASII.JK 0.0004207083 0.0001246004\nBBCA.JK 0.0001246004 0.0002229686\n\n, , 2018-01-03\n\n             ASII.JK      BBCA.JK\nASII.JK 0.0004086508 0.0001138079\nBBCA.JK 0.0001138079 0.0001985343\n\n, , 2018-01-04\n\n             ASII.JK      BBCA.JK\nASII.JK 0.0004134356 0.0001058398\nBBCA.JK 0.0001058398 0.0001784819\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conditional Volatilities\nvol <- sigma(dcc.fit)\nhead(vol)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              ASII.JK    BBCA.JK\n2018-01-01 0.02113246 0.01589787\n2018-01-02 0.02051117 0.01493213\n2018-01-03 0.02021511 0.01409022\n2018-01-04 0.02033311 0.01335971\n2018-01-05 0.02012066 0.01314337\n2018-01-08 0.01962831 0.01254032\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vol$ASII.JK)\n```\n\n::: {.cell-output-display}\n![](08-Bab8_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vol$BBCA.JK)\n```\n\n::: {.cell-output-display}\n![](08-Bab8_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conditional Correlations\ncor <- rcor(dcc.fit)\ncor[,,1:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 2018-01-01\n\n          ASII.JK   BBCA.JK\nASII.JK 1.0000000 0.4129141\nBBCA.JK 0.4129141 1.0000000\n\n, , 2018-01-02\n\n          ASII.JK   BBCA.JK\nASII.JK 1.0000000 0.4068245\nBBCA.JK 0.4068245 1.0000000\n\n, , 2018-01-03\n\n          ASII.JK   BBCA.JK\nASII.JK 1.0000000 0.3995568\nBBCA.JK 0.3995568 1.0000000\n\n, , 2018-01-04\n\n          ASII.JK   BBCA.JK\nASII.JK 1.0000000 0.3896261\nBBCA.JK 0.3896261 1.0000000\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate <- row.names(data.frame(cor[1,1,])) \ncor2 <- xts(cor[1, 2, ], order.by = as.Date(date))\nplot(cor2)\n```\n\n::: {.cell-output-display}\n![](08-Bab8_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast <- dccforecast(dcc.fit, n.ahead = 5)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast@mforecast$H #Cov\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n, , 1\n\n             [,1]         [,2]\n[1,] 2.400993e-04 5.997351e-05\n[2,] 5.997351e-05 1.426083e-04\n\n, , 2\n\n             [,1]         [,2]\n[1,] 2.460159e-04 6.413044e-05\n[2,] 6.413044e-05 1.492416e-04\n\n, , 3\n\n             [,1]         [,2]\n[1,] 2.517579e-04 6.792145e-05\n[2,] 6.792145e-05 1.554635e-04\n\n, , 4\n\n             [,1]         [,2]\n[1,] 2.573305e-04 7.138253e-05\n[2,] 7.138253e-05 1.612995e-04\n\n, , 5\n\n             [,1]         [,2]\n[1,] 2.627387e-04 7.454746e-05\n[2,] 7.454746e-05 1.667735e-04\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast@mforecast$R #Cor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n, , 1\n\n          [,1]      [,2]\n[1,] 1.0000000 0.3241094\n[2,] 0.3241094 1.0000000\n\n, , 2\n\n          [,1]      [,2]\n[1,] 1.0000000 0.3346861\n[2,] 0.3346861 1.0000000\n\n, , 3\n\n          [,1]      [,2]\n[1,] 1.0000000 0.3433217\n[2,] 0.3433217 1.0000000\n\n, , 4\n\n          [,1]      [,2]\n[1,] 1.0000000 0.3503723\n[2,] 0.3503723 1.0000000\n\n, , 5\n\n          [,1]      [,2]\n[1,] 1.0000000 0.3561289\n[2,] 0.3561289 1.0000000\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast@mforecast$mu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n              [,1]         [,2]\n[1,] -0.0004392902 0.0006354097\n[2,] -0.0004392902 0.0006354097\n[3,] -0.0004392902 0.0006354097\n[4,] -0.0004392902 0.0006354097\n[5,] -0.0004392902 0.0006354097\n```\n\n\n:::\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}